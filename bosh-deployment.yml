meta:
  db: ~
  name: bosh
  networks:
    default:
      static_ips: [10.0.0.7]
  cloud_properties:
    availability_zone: ~
  default_static_ip: (( grab meta.networks.default.static_ips.[0] ))
  aws:
    default_key_name: bosh
    default_security_groups: ~
    region: ~
  dns_recursor_ip: ~
  bosh_domain_name: ~
  passwords:
    nats-password: ~
    admin-password: ~
    director-password: ~
    agent-password: ~
    registry-password: ~
    hm-password: ~

name: (( grab meta.name ))

# Execute the "bosh status" command to obtain the director_uuid.
director_uuid: (( param "specify bosh directory" ))

releases:
- name: bosh
  version: latest
- name: bosh-aws-cpi
  version: latest
- name: uaa
  version: latest
- name: cron
  version: latest

compilation:
  workers: 3
  network: default
  reuse_compilation_vms: true
  cloud_properties:
    instance_type: c3.xlarge
    availability_zone: (( grab meta.cloud_properties.availability_zone ))

update:
  canaries: 1
  canary_watch_time: 3000-180000
  update_watch_time: 3000-180000
  max_in_flight: 4

networks: (( param "specify networks" ))

disk_pools:
- name: bosh-ssd
  disk_size: 300000
  cloud_properties:
    type: gp2
    encrypted: true

jobs:
- name: bosh
  templates:
  - {name: nats, release: bosh}
  - {name: blobstore, release: bosh}
  - {name: director, release: bosh}
  - {name: health_monitor, release: bosh}
  - {name: registry, release: bosh}
  - {name: powerdns, release: bosh}
  - {name: aws_cpi, release: bosh-aws-cpi}
  - {name: uaa, release: uaa}
  - {name: cron, release: cron}
  instances: 1
  resource_pool: large
  persistent_disk_pool: bosh-ssd
  networks:
  - name: default
    static_ips: (( grab meta.networks.default.static_ips ))

resource_pools:
- name: large
  network: default
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    instance_type: m3.large
    iam_instance_profile: (( grab terraform_outputs.bosh_profile ))
    availability_zone: (( grab meta.cloud_properties.availability_zone ))
    key_name: (( grab meta.aws.default_key_name ))

properties:
  postgres: &bosh_db
    adapter: postgres
    port: 5432
    user: (( grab meta.db.user ))
    password: (( grab meta.db.pass ))
    host: (( grab meta.db.host ))
    database: (( grab meta.db.database ))
    additional_databases:
    - (( grab meta.db.uaadb || "bosh_uaadb" ))

  dns:
    address: (( grab meta.default_static_ip ))
    db: *bosh_db
    recursor: (( grab meta.dns_recursor_ip ))
    domain_name: (( grab meta.bosh_domain_name ))

  nats:
    address: (( grab meta.default_static_ip ))
    user: nats
    password: (( grab meta.passwords.nats-password ))

  director:
    name: bosh
    address: (( grab meta.default_static_ip ))
    db: *bosh_db
    ssl: (( param "specify director ssl" ))
    cpi_job: aws_cpi
    flush_arp: true
    # TODO: Revert after https://github.com/cloudfoundry/bosh/issues/1486 is resolved
    enable_post_deploy: true
    user_management:
      provider: uaa
      uaa:
        url: (( concat "https://" meta.default_static_ip ":8443" ))

  blobstore:
    provider: s3
    server_side_encryption: AES256
    bucket_name: (( param "specify blobstore bucket" ))
    s3_region: (( grab meta.aws.region ))
    agent:
      user: agent
      password: (( grab meta.passwords.agent-password ))
    director:
      user: director
      password: (( grab meta.passwords.director-password ))

  registry:
    address: (( grab meta.default_static_ip ))
    host: (( grab meta.default_static_ip ))
    db: *bosh_db
    http:
      user: registry
      password: (( grab meta.passwords.registry-password ))
      port: 25777
    username: registry
    password: (( grab meta.passwords.registry-password ))
    port: 25777
    cloud:
      plugin: aws
      credentials_source: env_or_profile
      region: (( grab meta.aws.region ))

  hm:
    director_account:
      user: admin
      password: (( grab meta.passwords.admin-password ))
      ca_cert: (( param "specify health monitor director ca cert" ))
      client_id: hm
      client_secret: (( param "specify health monitor director client secret" ))
    varz_enabled: true
    resurrector_enabled: true
    resurrector:
      minimum_down_jobs: 3
    riemann_enabled: true

  aws: &aws
    credentials_source: env_or_profile
    default_key_name: (( grab meta.aws.default_key_name ))
    default_security_groups: (( grab meta.aws.default_security_groups ))
    default_iam_instance_profile: (( grab terraform_outputs.default_profile ))
    region: (( grab meta.aws.region ))

  agent:
    mbus: (( concat "nats://nats:" meta.passwords.nats-password "@" meta.default_static_ip ":4222" ))
  ntp: &ntp [time.nist.gov]

  uaa:
    url: (( concat "https://" meta.default_static_ip ":8443" ))
    clients:
      hm:
        override: true
        authorized-grant-types: client_credentials
        scope: ""
        authorities: bosh.admin
        secret: (( param "specify hm client secret" ))
      ci:
        authorized-grant-types: client_credentials
        scope: ""
        authorities: bosh.admin
        secret: (( param "specify ci client secret" ))
      bosh_cli:
        override: true
        authorized-grant-types: password,refresh_token
        # scopes the client may receive
        scope: openid,bosh.admin,bosh.read,bosh.*.admin,bosh.*.read
        authorities: uaa.none
        access-token-validity: 1200 # 20 min
        refresh-token-validity: 86400 # re-login required once a day
        secret: ""
      bosh_exporter:
        override: true
        authorized-grant-types: client_credentials
        authorities: bosh.read
        scope: ""
        secret: (( param "specify bosh exporter client secret" ))
    scim:
      users:
      - name: admin
        password: (( grab meta.passwords.admin-password ))
        groups:
        - scim.write
        - scim.read
        - bosh.admin
    zones:
      internal:
        hostnames:
        - (( grab meta.default_static_ip ))

  login:
    url: (( concat "https://" meta.default_static_ip ":8443" ))
    protocol: https
    brand: oss
    brand_title: cloud.gov
    self_service_links_enabled: false
    signups_enabled: false
    invitations_enabled: false

  uaadb: (( param "specify uaadb props" ))

  cron:
    entries:
    - script:
        name: unknown-vms.sh
        contents: (( file "bosh-config/cronjobs/unknown-vms.sh" ))
      minute: '*'
      hour: '*'
      day: '*'
      month: '*'
      wday: '*'
      user: root
